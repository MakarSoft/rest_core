from __future__ import annotations

import abc
import inspect
from copy import deepcopy  # Функция для глубокого копирования объектов.
from types import TracebackType  #  Тип для обработки исключений.
from typing import (
    TYPE_CHECKING as MYPY,
    Any,
    Optional,
    Type,
    TypeVar,
    Dict,
    Callable,
    Awaitable,
    Union,
    Tuple,
)

if MYPY:
    from aiomonobank.core.request_service import (
        RequestServiceProto,
    )  # pragma: no cover

T = TypeVar("T", bound="BaseAPIClient")

# Тип для фабрики, создающей RequestServiceProto,
# которая может быть как обычной, так и асинхронной функцией.
RequestServiceFactoryType = Callable[
    ..., Union[Awaitable["RequestServiceProto"], "RequestServiceProto"]
]

_C = TypeVar("_C", bound=Type["APIClientMeta"])


class APIClientMeta(abc.ABCMeta):
    """
    Due to limitations of aiohttp library that requires to create ClientSession only inside coroutine
    I have to write this metaclass to avoid additional viscous boilerplate code.
    Из-за ограничений библиотеки aiohttp, которая требует создания
    ClientSession только внутри сопрограммы, приходится писать этот
    метакласс, чтобы избежать дополнительного вязкого шаблонного кода.
    """

    # Метакласс APIClientMeta используется для автоматизации
    # проверки и обертывания асинхронных методов в классе,
    # который будет создан с его помощью.

    # __new__: Метод, который вызывается для создания нового класса.
    # В этом методе происходит:
    # Перебор атрибутов класса.
    # Проверка, является ли атрибут корутинной функцией.
    # Если атрибут не является специальным (не начинается с __),
    # и не является методом close, _create_request_service или
    # create_request_service, он оборачивается в функцию wrapper,
    # которая проверяет, инициализирован ли _request_service,
    # и если нет, создает его.

    def __new__(
        mcs: Type[_C],
        name: str,
        bases: Tuple[Any, ...],
        attrs: Dict[str, Any],
        **kwargs: Any,
    ) -> _C:

        # __new__: Метод, который вызывается для создания нового класса.
        # В этом методе происходит:
        # - Перебор атрибутов класса.
        # - Проверка, является ли атрибут корутинной функцией.
        # - Если атрибут не является специальным (не начинается с __),
        #   и не является методом close, _create_request_service или create_request_service,
        #   он оборачивается в функцию wrapper, которая проверяет, инициализирован
        #   ли _request_service, и если нет, создает его
        for key, attribute in attrs.items():
            is_name_mangled = key.startswith("__")
            if is_name_mangled:
                continue

            if not inspect.iscoroutinefunction(attribute):
                continue

            if key in (
                "close",
                "_create_request_service",
                "create_request_service",
            ):
                continue

            def wrapper(m) -> Any:
                async def check_request_service_before_execute(
                    self, *args: Any, **kw: Any
                ) -> Any:
                    if self._request_service is None:
                        self._request_service = (
                            await self.create_request_service()
                        )

                    return await m(self, *args, **kw)

                return check_request_service_before_execute

            attrs[key] = wrapper(attrs[key])

        return super().__new__(mcs, name, bases, attrs, **kwargs)


class BaseAPIClient(metaclass=APIClientMeta):
    # Класс BaseAPIClient использует метакласс APIClientMeta и
    # реализует основные функции для работы с API.

    # __init__: Конструктор, который принимает фабрику для создания
    #   RequestServiceProto.
    # __aenter__ и __aexit__: Методы для поддержки асинхронного
    #   контекстного менеджера. Они обеспечивают автоматическое
    #   создание и закрытие RequestService.
    # close: Асинхронный метод для завершения работы с RequestService,
    #   если он был инициализирован.
    # create_request_service: Метод для создания RequestServiceProto,
    #   который проверяет, является ли фабрика асинхронной функцией,
    #   и вызывает ее соответствующим образом.
    # _create_request_service: Абстрактный метод, который должен быть
    #   реализован в подклассах для создания конкретного RequestServiceProto.
    # __deepcopy__: Метод для глубокого копирования экземпляров класса,
    #   который обходит возможные ошибки при копировании атрибутов.

    def __init__(
        self,
        request_service_factory: Optional[RequestServiceFactoryType] = None,
    ):
        self._request_service_factory = request_service_factory
        self._request_service: RequestServiceProto = None  # type: ignore

    async def __aenter__(self):  # type: ignore
        if self._request_service is None:
            self._request_service = await self.create_request_service()
        return self

    async def __aexit__(
        self,
        exc_type: Optional[Type[BaseException]],
        exc_value: Optional[BaseException],
        traceback: Optional[TracebackType],
    ) -> None:
        await self.close()

    async def close(self) -> None:
        if self._request_service is None:
            return None

        await self._request_service.shutdown()

    async def create_request_service(self) -> RequestServiceProto:
        if self._request_service_factory is not None:
            if inspect.iscoroutinefunction(self._request_service_factory):
                return await self._request_service_factory(self)  # type: ignore
            return self._request_service_factory(self)  # type: ignore

        return await self._create_request_service()

    @abc.abstractmethod
    async def _create_request_service(self) -> RequestServiceProto:
        pass

    def __deepcopy__(self: T, memo: Dict[Any, Any]) -> T:
        cls = self.__class__
        result = cls.__new__(cls)
        memo[id(self)] = result
        for k, v in self.__dict__.items():
            try:
                setattr(result, k, deepcopy(v, memo))
            except TypeError:
                pass
        return result
