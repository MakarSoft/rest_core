import abc
from typing import (
    Optional,
    Any,
    TypeVar,
    Generic,
    ClassVar,
    Callable,
    Set,
    cast,
    Union,
    no_type_check,
)

from pydantic import BaseModel, ConfigDict, model_validate, parse_obj_as

from pydantic.fields import ModelField
from pydantic.generics import GenericModel

from aiomonobank.core.session.holder import HTTPResponse
from aiomonobank.utils.compat import json


ReturningType = TypeVar("ReturningType")
_sentinel = object()

# Использование объекта-сентинела (sentinel object) для `_sentinel` в классе
# `APIMethod` является распространенной и логичной практикой в Python, особенно
# когда вам нужно обозначить "отсутствие значения" или "неизвестное состояние".
# Давайте рассмотрим, почему это может быть полезно и какие преимущества это
# дает.
#
# ### Преимущества использования объекта-сентинела
#
# 1. **Ясность намерений**:
#    - Объект-сентинел позволяет явно указать, что значение не было установлено.
#      Это делает код более читаемым и понятным для других разработчиков,
#      которые могут работать с вашим кодом в будущем.
#
# 2. **Избежание конфликтов с другими значениями**:
#    - Использование уникального объекта, такого как `_sentinel`, позволяет
#      избежать конфликтов с другими значениями, которые могут быть допустимыми
#      для вашего атрибута. Например, если вы используете `None` в качестве
#      маркера отсутствия значения, это может вызвать путаницу, если `None`
#      также является допустимым значением для вашего поля.

# 3. **Упрощение логики проверки**:
#    - Проверка на наличие значения становится простой и понятной.
#      Например, вы можете легко проверить, было ли значение установлено,
#      сравнивая его с `_sentinel`:
#
#    if cls.__returning_type__ is _sentinel:
#        # Значение не установлено
#
# 4. **Гибкость**:
#    - Если в будущем вам нужно будет изменить логику или добавить дополнительные
#      состояния, использование объекта-сентинела позволяет сделать это без изменения
#      существующего кода, так как вы можете просто добавить новые состояния или значения.
#
# ### Пример использования
#
# Вот как это может выглядеть в этом классе:
#
# _sentinel = object()  # Уникальный объект-сентинел
#
# class APIMethod(Generic[ReturningType]):
#     __returning_type__: ClassVar[Any] = _sentinel  # Инициализация с использованием сентинела
#
#     def __class_getitem__(cls, params):
#         if cls.__returning_type__ is _sentinel:
#             cls.__returning_type__ = params  # Установка типа
#         return super().__class_getitem__(params)
#
#     @classmethod
#     def parse_http_response(cls, response) -> ReturningType:
#         if cls.__returning_type__ is _sentinel:
#             raise RuntimeError("Returning type is missing")  # Проверка на сентинел
#         # Логика обработки ответа
#
# Использование объекта-сентинела для `_sentinel` в классе `APIMethod` является логичным
# и полезным подходом. Он помогает избежать путаницы, делает код более читаемым и упрощает
# логику проверки на наличие значения.
# Это хорошая практика, особенно в контексте работы с типами и состояниями,
# где важно четко обозначить, когда значение еще не было установлено.
#
#
# PEP 661, который был принят в 2022 году, вводит концепцию "сентинела" (sentinel)
# в контексте аннотаций типов в Python. Этот PEP предлагает способ создания уникальных
# объектов, которые могут использоваться для обозначения отсутствия значений или
# специальных состояний в аннотациях типов.
#
# ### Основные моменты PEP 661
#
# 1. **Определение сентинела**:
#    - Сентинел — это уникальный объект, который используется для обозначения отсутствия
#      значения или специального состояния. Это позволяет избежать путаницы с другими
#      значениями, такими как `None`, которые могут быть допустимыми значениями.
#
# 2. **Использование в аннотациях типов**:
#    - PEP 661 предлагает использовать сентинелы в аннотациях типов для более четкого
#      указания на то, что определенные параметры или возвращаемые значения могут быть
#      отсутствующими или иметь специальные значения.
#
# 3. **Создание сентинела**:
#    - Сентинел может быть создан с помощью специального класса, который гарантирует,
#      что каждый созданный объект будет уникальным. Например:
#
#    class Sentinel:
#        pass
#
#    _sentinel = Sentinel()
#
# 4. **Преимущества**:
#    - Использование сентинела позволяет избежать конфликтов с другими
#      значениями, такими как `None`, и делает код более читаемым и понятным.
#    - Это также упрощает логику проверки на наличие значений, так как вы
#      можете просто сравнивать с уникальным объектом.
#
# ### Применение в коде
#
# В  классе `APIMethod` использование сентинела для `_sentinel` может быть
# оправдано, так как это позволяет четко обозначить, что `__returning_type__`
# еще не был установлен. Это делает код более понятным и предотвращает
# возможные ошибки, связанные с использованием `None` в качестве маркера
# отсутствия значения.
#
# ### Пример использования сентинела
#
# Вот как это может выглядеть в контексте нашего класса:

# ```python
# class Sentinel:
#     pass
#
# _sentinel = Sentinel()  # Уникальный объект-сентинел
#
# class APIMethod(Generic[ReturningType]):
#     # Инициализация с использованием сентинела
#     __returning_type__: ClassVar[Any] = _sentinel
#
#     def __class_getitem__(cls, params):
#         if cls.__returning_type__ is _sentinel:
#             cls.__returning_type__ = params  # Установка типа
#         return super().__class_getitem__(params)

#     @classmethod
#     def parse_http_response(cls, response) -> ReturningType:
#         if cls.__returning_type__ is _sentinel:
#             # Проверка на сентинел
#             raise RuntimeError("Returning type is missing")
#         # Логика обработки ответа
# ```
#
# Использование сентинела в соответствии с PEP 661 является хорошей практикой,
# особенно когда вам нужно обозначить отсутствие значения или специальное
# состояние.
# Это делает код более читаемым и предотвращает путаницу с другими значениями,
# такими как `None`.
# В  классе `APIMethod` использование сентинела для `__returning_type__`
# является логичным и оправданным решением.

# Модуль `sentinel`, который можно импортировать с помощью
# `from sentinel import Sentinel`, предоставляет удобный способ создания
# уникальных объектов-сентинелов в Python. Этот модуль был разработан для
# упрощения работы с сентинелами, позволяя разработчикам легко создавать
# и использовать уникальные объекты для обозначения отсутствия значений
# или специальных состояний.
#
# ### Основные особенности модуля `sentinel`
#
# 1. **Уникальные объекты**:
#    - Модуль `sentinel` позволяет создавать уникальные объекты, которые могут
# использоваться в качестве маркеров. Эти объекты гарантированно будут
# уникальными, что позволяет избежать путаницы с другими значениями.
#
# 2. **Простота использования**:
#    - Использование модуля `sentinel` упрощает создание сентинелов, так как
# вам не нужно вручную определять класс или объект. Вы можете просто
# импортировать и использовать его.
#
# 3. **Примеры использования**:
#    - Вот как можно использовать модуль `sentinel` для создания уникальных
#      объектов:
#
#    from sentinel import Sentinel
#
#    # Создание уникального сентинела
#    _sentinel = Sentinel()
#
#    class APIMethod:
#        # Инициализация с использованием сентинела
#        __returning_type__ = _sentinel
#
#        def set_returning_type(self, returning_type):
#            if self.__returning_type__ is _sentinel:
#                self.__returning_type__ = returning_type
#
#        def check_returning_type(self):
#            if self.__returning_type__ is _sentinel:
#                raise RuntimeError("Returning type is missing")
#
# 4. **Преимущества использования модуля `sentinel`**:
#    - **Читаемость**: Код становится более понятным, так как использование
# сентинела явно указывает на намерение обозначить отсутствие значения.
#    - **Избежание конфликтов**: Уникальные объекты предотвращают путаницу
# с другими значениями, такими как `None`, которые могут быть допустимыми
# значениями в вашем коде.
#    - **Упрощение логики**: Проверка на наличие значения становится простой
# и понятной, так как вы можете легко сравнивать с уникальным объектом.
#
# Использование модуля `sentinel` для создания уникальных объектов-сентинелов
# является хорошей практикой, особенно когда вам нужно обозначить отсутствие
# значения или специальное состояние. Это делает код более читаемым и
# предотвращает путаницу с другими значениями. Если вы хотите использовать
# сентинелы в своем коде, модуль `sentinel` предоставляет удобный и эффективный
# способ сделать это.


DEFAULT_EXCLUDE = {"request_schema", "endpoint", "http_method"}


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def _filter_none_values(d: dict[str, Any]) -> dict[str, Any]:
    return {k: v for k, v in d.items() if v}


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def _insert_value_into_dictionary(
    d: dict[str, Any], keychain: list[str], value: Any
) -> None:  # pragma: no cover
    """
    Вставка значения в словарь (d), используя цепочку ключей (keychain),
    которая представляет собой список строк (ключей).
    Если ключи в keychain указывают на вложенные словари - рекурсивно
    спускаемся по ним, чтобы вставить значение.
    Позволяет добавлять значения в словари с произвольной глубиной вложенности.
    Может быть полезна при работе с данными, представленными в виде JSON.
    Пример использования:
    data = {
        'a': {
            'b': {
                'c': 1
            }
        }
    }

    _insert_value_into_dictionary(data, ['a', 'b', 'd'], 2)
    print(data)  # {'a': {'b': {'c': 1, 'd': 2}}}

    _insert_value_into_dictionary(data, ["a"], 100)
    print(data)  # {'a': 100}

    """
    if not keychain:
        return

    current_key = keychain.pop(0)  # Получаем текущий ключ из keychain
    if not keychain:
        # Это последний ключ из keychain
        d[current_key] = value
        return  # Завершаем выполнение

    # Иначе продолжаем искать вложенные словари
    for k, v in d.items():
        if not isinstance(v, dict):
            continue

        if k == current_key:
            _insert_value_into_dictionary(v, keychain, value)


# ====================================================================
# ====================================================================
class RuntimeValueIsMissing(Exception):
    pass


# ====================================================================
# ====================================================================
class APIMethod(abc.ABC, GenericModel, Generic[ReturningType]):
    """
    Отражает реальный метод API, который может быть использован
    с использованием соответствующих клиентов.
    """

    model_config = ConfigDict(
        validate_default=True,
        extra="allow",
        allow_population_by_field_name=True,
        arbitrary_types_allowed=True,
        orm_mode=True,
        underscore_attrs_are_private=True,
        json_loads=json.loads,
        json_dumps=json.dumps,  # type: ignore
    )

    __returning_type__: ClassVar[Any] = _sentinel

    # подробнее рассмотрим атрибут `__returning_type__`, который используется
    # в классе `APIMethod`, и его роль в контексте обобщенных классов и Pydantic.
    #
    # ### Что такое `__returning_type__`?
    #
    # `__returning_type__` — это атрибут класса, который используется для хранения
    # информации о типе данных, который будет возвращен методом API.
    # Этот атрибут позволяет классу `APIMethod` быть обобщенным и адаптироваться
    # к различным типам данных, которые могут возвращаться в зависимости от конкретного
    # метода API.
    #
    # ### Зачем нужен `__returning_type__`?
    #
    # 1. **Типизация**:
    #    - `__returning_type__` позволяет явно указать, какой тип данных будет возвращен
    #      методом API. Это полезно для статической типизации и улучшает читаемость кода.
    #    - Например, если у вас есть метод API, который возвращает объект пользователя,
    #      вы можете указать, что `__returning_type__` будет `UserModel`.

    # 2. **Гибкость**:
    #    - Используя `__returning_type__`, вы можете создавать подклассы `APIMethod`,
    #      которые будут возвращать разные типы данных, не изменяя основную логику обработки
    #      ответов.
    #    - Это позволяет легко расширять функциональность API-клиента, добавляя новые
    #      методы, которые возвращают различные типы данных.

    # 3. **Проверка типов**:
    #    - При обработке HTTP-ответов вы можете использовать `__returning_type__` для
    #      проверки и валидации данных, которые вы получаете от API. Это помогает
    #      избежать ошибок, связанных с неправильными типами данных.
    #
    # ### Как используется `__returning_type__` в классе `APIMethod`?
    #
    # В классе `APIMethod` `__returning_type__` инициализируется значением `_sentinel`,
    # который является уникальным объектом, используемым для проверки, был ли установлен
    # тип возвращаемого значения. Вот как это работает:
    #
    # 1. **Инициализация**:
    #    __returning_type__: ClassVar[Any] = _sentinel
    #
    #    Здесь `__returning_type__` инициализируется значением `_sentinel`, что указывает
    #    на то, что тип еще не был установлен.
    #
    # 2. **Установка типа**:
    #    Метод `__class_getitem__` используется для установки `__returning_type__`
    #    при использовании синтаксиса индексирования:
    #
    #    def __class_getitem__(cls, params):
    #        if cls.__returning_type__ is _sentinel:
    #            cls.__returning_type__ = params
    #        else:
    #            # Логика для обработки уже установленного типа
    #            ...
    #    ```
    #
    #    Когда вы создаете подкласс `APIMethod`, например, `GetUserMethod[UserModel]`,
    #    метод `__class_getitem__` будет вызван, и `__returning_type__` будет установлен
    #    в `UserModel`.
    #
    # 3. **Использование в методах**:
    #    В методах класса, таких как `parse_http_response`, вы можете использовать
    #    `__returning_type__` для обработки ответов:
    #
    #    @classmethod
    #    def parse_http_response(cls, response: HTTPResponse) -> ReturningType:
    #        if cls.__returning_type__ is _sentinel:
    #            raise RuntimeError("Returning type is missing")
    #        # Логика обработки ответа
    #        ...
    #    ```
    #
    #    Здесь вы проверяете, установлен ли `__returning_type__`, и используете
    #    его для валидации и обработки данных, полученных от API.
    #
    # ### Пример использования
    #
    # Вот пример, как это может выглядеть в контексте вашего класса:
    #
    # from pydantic import BaseModel
    # from typing import TypeVar, Generic
    #
    # ReturningType = TypeVar("ReturningType")
    #
    # class UserModel(BaseModel):
    #     id: int
    #     name: str
    #
    # class APIMethod(Generic[ReturningType]):
    #     __returning_type__ = _sentinel
    #
    #     def __class_getitem__(cls, params):
    #         cls.__returning_type__ = params
    #         return super().__class_getitem__(params)
    #
    #     @classmethod
    #     def parse_http_response(cls, response) -> ReturningType:
    #         if cls.__returning_type__ is _sentinel:
    #             raise RuntimeError("Returning type is missing")
    #         # Логика обработки ответа
    #         return cls.__returning_type__.parse_obj(response.json())
    #
    # class GetUserMethod(APIMethod[UserModel]):
    #     pass
    #
    # # Использование
    # method = GetUserMethod[UserModel]()
    # response = ...  # Полученный HTTP-ответ
    # user = method.parse_http_response(response)
    # ```
    #

    json_payload_schema: ClassVar[dict[str, Any]] = {}

    # url и http_method являются абстрактными свойствами, которые должны
    # быть реализованы в подклассах. Это позволяет каждому конкретному
    # API-методу определять свой URL и HTTP-метод.
    @property
    @abc.abstractmethod
    def url(self) -> str:
        pass

    @property
    @abc.abstractmethod
    def http_method(self) -> str:
        pass

    # ----------------------------------------------------------------
    #
    # __class_getitem__: Переопределяет поведение получения элемента класса,
    # чтобы поддерживать обобщенные типы. Проверяет, что параметры не пустые
    # и устанавливает __returning_type__.
    #
    # Метод __class_getitem__ в Python — это специальный метод, который
    # позволяет управлять поведением классов при использовании синтаксиса
    # индексирования (например, ClassName[Type]).
    # Этот метод был введен в PEP 560 и позволяет создавать обобщенные
    # классы, которые могут принимать параметры типа.
    #
    # Основные моменты о __class_getitem__
    # Определение:
    # -------------
    # Метод __class_getitem__(cls, item) вызывается, когда вы используете
    # квадратные скобки для доступа к элементам класса.
    # Например, если у вас есть класс MyClass, и вы пишете MyClass[SomeType],
    # Python вызывает MyClass.__class_getitem__(SomeType).
    # Использование:
    # -------------
    # Этот метод часто используется в обобщенных классах (generic classes)
    # для обработки параметров типа. Он позволяет вам определять, как класс
    # должен реагировать на использование параметров типа.
    # Пример:
    # -------
    # Вот простой пример использования __class_getitem__ в обобщенном классе:
    # -----------------------------------------
    # from typing import TypeVar, Generic
    #
    # T = TypeVar('T')
    #
    # class MyGenericClass(Generic[T]):
    #     def __class_getitem__(cls, item):
    #         print(f'Called with item: {item}')
    #         return super().__class_getitem__(item)
    #
    # # Использование
    # MyGenericClass[int]  # Вывод: Called with item: <class 'int'>
    # -----------------------------------------
    #
    # Применение в Pydantic:
    # В контексте Pydantic, метод __class_getitem__ может использоваться
    # для обработки параметров типа в обобщенных моделях.
    # Например, в классе APIMethod, метод __class_getitem__ позволяет
    # динамически устанавливать тип возвращаемого значения в зависимости
    # от переданных параметров.
    #
    # Проверка типов:
    # Внутри __class_getitem__ вы можете выполнять проверки типов,
    # обрабатывать параметры и изменять поведение класса в зависимости от
    # переданных аргументов.
    #
    # Пример использования в Pydantic
    # В APIMethod метод __class_getitem__ используется для обработки параметров
    # типа, которые передаются при создании экземпляров класса.
    # Вот упрощенный пример, как это может выглядеть:
    #
    # from pydantic.generics import GenericModel
    # from typing import TypeVar, Generic
    #
    # ReturningType = TypeVar("ReturningType")
    #
    # class APIMethod(GenericModel, Generic[ReturningType]):
    #     __returning_type__ = None
    #
    #     def __class_getitem__(cls, params):
    #         if isinstance(params, tuple):
    #             return super().__class_getitem__(params)
    #
    #         cls.__returning_type__ = params
    #         return super().__class_getitem__(params)
    #
    # # Использование
    # class GetUserMethod(APIMethod[UserModel]):
    #     pass
    #
    # # Теперь __returning_type__ будет установлен в UserModel
    #
    # Заключение
    # Метод __class_getitem__ является мощным инструментом для работы
    # с обобщенными классами в Python. Он позволяет вам управлять
    # поведением классов при использовании параметров типа, что делает
    # код более гибким и типобезопасным. В контексте Pydantic этот метод
    # может быть использован для динамической обработки типов,
    # что позволяет создавать более сложные и адаптивные модели.
    # ----------------------------------------------------------------
    @no_type_check
    def __class_getitem__(cls, params):
        """
        Позволяет нам получить универсальный класс во время выполнения
        вместо того, чтобы делать это явно в каждом классе, наследующем
        от APIMethod.

        @param params:
        @return:
        """
        if isinstance(params, tuple):
            return super().__class_getitem__(params)

        if not params and cls is not tuple:
            raise TypeError(
                f"Parameter list to {cls.__qualname__}[...] cannot be empty"
            )

        key = params  # just alias

        if cls.__returning_type__ is _sentinel or cls.__returning_type__ is ReturningType:  # type: ignore
            cls.__returning_type__ = key
        else:
            try:
                cls.__returning_type__ = cls.__returning_type__[key]
            except TypeError:
                cls.__returning_type__ = key

        return super().__class_getitem__(params)

    # ----------------------------------------------------------------
    # ----------------------------------------------------------------
    def __init_subclass__(cls) -> None:
        if cls.__returning_type__ is not _sentinel:
            cls.__returning_type__ = cls.__returning_type__

    # ----------------------------------------------------------------
    # parse_http_response: Обрабатывает HTTP-ответ и возвращает объект нужного типа.
    # Проверяет наличие типа возвращаемого значения и валидирует ответ.
    # ----------------------------------------------------------------
    @classmethod
    def parse_http_response(cls, response: HTTPResponse) -> ReturningType:
        if cls.__returning_type__ is _sentinel or cls.__returning_type__ is ReturningType:  # type: ignore
            raise RuntimeError(
                f"{cls.__qualname__}: __returning_type__ is missing"
            )
        cls._validate_response(response)

        try:
            return cls.on_json_parse(response)
        except TypeError:
            pass

        json_response = response.json()

        try:
            if issubclass(cls.__returning_type__, BaseModel):
                return cast(
                    ReturningType,
                    cls.__returning_type__.parse_obj(json_response),
                )
        except TypeError:  # issubclass() arg 1 must be a class
            pass

        return cast(
            ReturningType, parse_obj_as(cls.__returning_type__, json_response)
        )

    # ----------------------------------------------------------------
    # ----------------------------------------------------------------
    @classmethod
    @abc.abstractmethod
    def _validate_response(cls, response: HTTPResponse) -> None:
        pass

    # ----------------------------------------------------------------
    # ----------------------------------------------------------------
    @classmethod
    def on_json_parse(
        cls, response: HTTPResponse
    ) -> Union[Any, ReturningType]:
        raise TypeError(
            f"{cls.__module__}.{cls.__qualname__}: doesn't implement json parse hook."
        )

    # ----------------------------------------------------------------
    # build_request: Формирует запрос на основе заданного URL и HTTP-метода.
    # Является ключевым компонентом для формирования HTTP-запросов
    # в классе APIMethod.
    # Он обеспечивает гибкость и безопасность, позволяя динамически
    # формировать запросы на основе состояния модели и переданных параметров.
    # Метод также включает проверки, чтобы гарантировать, что запросы соответствуют
    # спецификациям HTTP, что делает его надежным инструментом для работы с API.
    #
    # Обрабатывает параметры для GET и POST
    # Метод build_request
    # Параметры:
    #   **url_format_kw: Позволяет передавать произвольное количество
    #    именованных аргументов, которые могут использоваться для
    #    форматирования URL.
    # ----------------------------------------------------------------
    def build_request(self, **url_format_kw: Any) -> "Request":

        # Создается словарь request_kw, который будет содержать параметры
        # для запроса.
        request_kw: dict[str, Any] = {
            "endpoint": self.url.format(
                **url_format_kw, **self._get_runtime_path_values()
            ),
            "http_method": self.http_method,
        }

        # Если HTTP-метод равен "GET" и определена схема JSON
        # (self.json_payload_schema), выбрасывается исключение TypeError.
        # Это связано с тем, что метод GET не должен содержать тело запроса,
        # и передача JSON-pyload в таком случае является некорректной.
        if self.http_method == "GET":
            if self.json_payload_schema:
                raise TypeError(
                    "Request schema is not compatible with GET http method "
                    "since GET method cannot transfer json payload"
                )

            # формируется параметр params, который заполняется значениями из
            # модели, исключая None значения и используя алиасы полей.
            # Метод self._get_exclude_set() используется для исключения полей,
            # которые не должны быть включены в запрос.
            # Метод dict() используется для получения словаря, представляющего
            # поля модели и их значения
            # exclude_none=True: параметр указывает, что поля с значением None
            #   должны быть исключены из результирующего словаря. Это полезно,
            #   чтобы не передавать пустые значения в запрос, что может быть
            #   нежелательно в контексте API.
            # by_alias=True: параметр указывает, что в результирующем словаре
            #   должны использоваться алиасы полей, если они определены. Это
            #   позволяет использовать более удобные или понятные имена полей,
            #   которые могут отличаться от имен атрибутов в модели.
            #   Например, если у вас есть поле с именем user_id, но вы
            #   определили его алиас как id, то в результирующем словаре будет
            #   использоваться id.
            # exclude=self._get_exclude_set():  параметр позволяет исключить
            #   дополнительные поля из результирующего словаря.
            #   Метод _get_exclude_set() возвращает множество имен полей, которые
            #   должны быть исключены. Это может быть полезно для динамического
            #   исключения полей, которые не должны быть включены в запрос
            #   (например, временные или внутренние поля).
            #
            # Результат вызова self.dict(...) присваивается ключу "params" в
            # словаре request_kw.
            # Это означает, что параметры, полученные из модели, будут
            # использоваться в качестве параметров запроса для HTTP-запроса,
            # если метод является GET.
            request_kw["params"] = self.model_dump(
                exclude_none=True,
                by_alias=True,
                exclude=self._get_exclude_set(),
            )

            # request_kw["params"] = self.dict(
            #     exclude_none=True,
            #     by_alias=True,
            #     exclude=self._get_exclude_set(),
            # )
        else:
            # POST
            if self.json_payload_schema:
                # Обработка JSON-payload для POST-запросов
                # Если определена схема JSON (self.json_payload_schema)
                # - формируется параметр json_payload, который заполняется
                # посредствам метода _get_filled_json_payload_schema()
                request_kw["json_payload"] = (
                    self._get_filled_json_payload_schema()
                )
            else:
                # Если схема JSON не определена, формируется параметр data,
                # который заполняется значениями из модели, аналогично
                # параметру params
                request_kw["data"] = self.model_dump(
                    exclude_none=True,
                    by_alias=True,
                    exclude=self._get_exclude_set(),
                )
                # request_kw["data"] = self.dict(
                #     exclude_none=True,
                #     by_alias=True,
                #     exclude=self._get_exclude_set(),
                # )
        # Метод возвращает объект Request, который создается с использованием
        # отфильтрованных значений из request_kw.
        # Функция _filter_none_values используется для удаления значений,
        # равных None, из словаря, чтобы избежать передачи пустых параметров.
        return Request.model_validate(_filter_none_values(request_kw))
        # return Request(**_filter_none_values(request_kw))

    # ----------------------------------------------------------------
    # Метод возвращает множество строк (Set[str]), которое содержит имена
    # полей, которые должны быть исключены из сериализации или обработки.
    # ----------------------------------------------------------------
    def _get_exclude_set(self) -> Set[str]:

        # {"request_schema", "endpoint", "http_method"}
        # создается копия множества DEFAULT_EXCLUDE, содержащее имена полей,
        # которые должны быть исключены по умолчанию.
        # Это может быть полезно для исключения полей, которые не должны быть
        # отправлены в запрос или обработаны.
        to_exclude: Set[str] = DEFAULT_EXCLUDE.copy()

        # Итерация по полям модели
        for key, field in self.model_fields.items():
            # есть ли у поля дополнительная информация (в данном случае,
            # флаг path_runtime_value), указывающая на то, что это поле
            # является значением времени выполнения, которое не должно
            # быть включено в сериализацию.
            if field.field_info.extra.get("path_runtime_value", False):
                to_exclude.add(key)

        return to_exclude

    # ----------------------------------------------------------------
    # ----------------------------------------------------------------
    def _get_filled_json_payload_schema(self) -> dict[str, Any]:
        """
        Algorithm of this function firstly takes care of default values,
        if field has no default value for schema it checks values, that were
        transmitted to method

        @return:
        """
        request_schema = self._get_schema_with_filled_runtime_values()
        # получения словаря значений полей модели, исключая поля со
        # значением None, используя алиасы и исключая определенные поля,
        # которые возвращает метод _get_exclude_set()
        schema_values = self.self.model_dump(
            exclude_none=True, by_alias=True, exclude=self._get_exclude_set()
        )

        # итерируемся по всем полям модели
        for key, field in self.model_fields.items():
            scheme_path: str = field.field_info.extra.get(
                "scheme_path", field.name
            )
            keychain = scheme_path.split(".")
            try:
                field_value = schema_values[key]
            except KeyError:
                continue
            _insert_value_into_dictionary(
                request_schema, keychain, field_value
            )

        return request_schema

    # ----------------------------------------------------------------
    # ----------------------------------------------------------------
    def _get_schema_with_filled_runtime_values(self) -> dict[str, Any]:
        scheme_paths: list[str] = [
            field.field_info.extra.get("scheme_path", field.name)
            for field in self.__fields__.values()
            if field.name in self.dict(exclude_none=True)
        ]
        schema = self.json_payload_schema.copy()

        def apply_runtime_values_to_schema(d: dict[str, Any]) -> None:
            for k, v in list(d.items()):
                if isinstance(v, dict):
                    apply_runtime_values_to_schema(v)
                elif isinstance(v, RuntimeValue):
                    if v.has_default() and k not in scheme_paths:
                        d[k] = v.get_default()
                        continue
                    elif v.is_mandatory is False:
                        d.pop(k)

        apply_runtime_values_to_schema(schema)

        return schema

    # ----------------------------------------------------------------
    # ----------------------------------------------------------------
    def _get_runtime_path_values(self) -> dict[str, Any]:

        result: dict[str, Any] = {}

        for field_name, value in self.dict().items():
            field: ModelField = self.__fields__[field_name]
            is_path_runtime_value = field.field_info.extra.get(
                "path_runtime_value", False
            )
            if not is_path_runtime_value:
                continue

            result[field.alias] = value

        return result


# ====================================================================
# ====================================================================
class Request(BaseModel):

    endpoint: str

    data: Optional[dict[str, Optional[Any]]] = None
    params: Optional[dict[str, Optional[Any]]] = None
    json_payload: Optional[dict[str, Any]] = None
    headers: dict[str, Any] = {}

    http_method: str = "GET"

    model_config = ConfigDict(arbitrary_types_allowed=True)


# ====================================================================
# ====================================================================
class RuntimeValue:

    __slots__ = ("_default", "_default_factory", "is_mandatory")

    def __init__(
        self,
        default: Optional[Any] = None,
        default_factory: Optional[Callable[..., Any]] = None,
        mandatory: bool = True,
    ):
        self._default = default
        self._default_factory = default_factory
        self.is_mandatory = mandatory

    def has_default(self) -> bool:
        return self._default is not None or self._default_factory is not None

    def get_default(self) -> Any:
        if self._default is not None:
            return self._default
        if self._default_factory is not None:
            return self._default_factory()
